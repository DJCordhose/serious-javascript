{
  "name": "react-server-example",
  "version": "0.1.0",
  "description": "A very simple implementation of server-side React rendering",
  "main": "server.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/mhart/react-server-example"
  },
  "keywords": [
    "react",
    "reactjs",
    "server",
    "server-side"
  ],
  "author": {
    "name": "Michael Hart",
    "email": "michael.hart.au@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "envify": "^1.2.1",
    "react": "^0.10.0",
    "browserify": "^3.33.0",
    "literalify": "^0.3.0"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "react-server-example\n--------------------\n\nA simple example of how to do server-side rendering with the [React](http://facebook.github.io/react/) library\nso that component code can be shared between server and browser,\nas well as getting fast initial page loads and search-engine-friendly pages.\n\nExample\n-------\n\n```sh\n$ node server.js\n```\n\nThen navigate to [http://localhost:3000](http://localhost:3000) and\nclick on the button to see some reactive events in action.\n\nTry viewing the page source to ensure the HTML being sent from the server is already rendered\n(with checksums to determine whether client-side rendering is necessary)\n\nHere are the files involved:\n\n`myApp.js`:\n```js\nvar React = require('react'),\n    DOM = React.DOM,\n    div = DOM.div, button = DOM.button, ul = DOM.ul, li = DOM.li\n\n// This is just a simple example of a component that can be rendered on both\n// the server and browser\n\nmodule.exports = React.createClass({\n\n  // We initialise its state by using the `props` that were passed in when it\n  // was first rendered\n  getInitialState: function() {\n    return {items: this.props.items}\n  },\n\n  // Then we just update the state whenever its clicked - but you could imagine\n  // this being updated with the results of AJAX calls, etc\n  handleClick: function() {\n    this.setState({items: this.state.items.concat(this.state.items.length)})\n  },\n\n  // For ease of illustration, we just use the React JS methods directly\n  // (no JSX compilation needed)\n  // Note that we allow the button to be disabled depending on the props passed\n  // in, so we can render it disabled initially, and then enable it when\n  // everything has loaded\n  render: function() {\n    return div(null,\n      button({onClick: this.handleClick, disabled: this.props.disabled}, 'Add Item'),\n      ul({children: this.state.items.map(function(item) {\n        return li(null, item)\n      })})\n    )\n  },\n})\n```\n\n`server.js`:\n```js\nvar http = require('http'),\n    browserify = require('browserify'),\n    literalify = require('literalify'),\n    React = require('react'),\n    // This is our React component, shared by server and browser thanks to browserify\n    MyApp = require('./myApp')\n\n\n// Just create a plain old HTTP server that responds to two endpoints ('/' and\n// '/bundle.js') This would obviously work similarly with any higher level\n// library (Express, etc)\nhttp.createServer(function(req, res) {\n\n  // If we hit the homepage, then we want to serve up some HTML - including the\n  // server-side rendered React component(s), as well as the script tags\n  // pointing to the client-side code\n  if (req.url == '/') {\n\n    // This represents our data to be passed in to the React component for\n    // rendering - just as you would pass data, or expose variables in\n    // templates such as Jade or Handlebars.  We just use an array of garbage\n    // here (with some potentially dangerous values for testing), but you could\n    // imagine this would be objects typically fetched async from a DB,\n    // filesystem or API, depending on the logged-in user, etc.\n    // We also render the button disabled, and enable it once the page has loaded\n    var props = {items: [0, 1, '</script>', '<!--inject!-->'], disabled: true}\n\n    // Now that we've got our data, we can perform the server-side rendering by\n    // passing it in as `props` to our React component - and returning an HTML\n    // string to be sent to the browser\n    var myAppHtml = React.renderComponentToString(MyApp(props))\n\n    res.setHeader('Content-Type', 'text/html')\n\n    // Now send our page content - this could obviously be constructed in\n    // another template engine, or even as a top-level React component itself -\n    // but easier here just to construct on the fly\n    res.end(\n      // <html>, <head> and <body> are for wusses\n\n      // Include our static React-rendered HTML in our content div. This is\n      // the same div we render the component to on the client side, and by\n      // using the same initial data, we can ensure that the contents are the\n      // same (React is smart enough to ensure no rendering will actually occur\n      // on page load)\n      '<div id=content>' + myAppHtml + '</div>' +\n\n      // We'll load React from a CDN - you don't have to do this,\n      // you can bundle it up or serve it locally if you like\n      '<script src=//fb.me/react-0.10.0.min.js></script>' +\n\n      // Then the browser will fetch the browserified bundle, which we serve\n      // from the endpoint further down. This exposes our component so it can be\n      // referenced from the next script block\n      '<script src=/bundle.js></script>' +\n\n      // This script renders the component in the browser, referencing it\n      // from the browserified bundle, using the same props we used to render\n      // server-side. We could have used a window-level variable, or even a\n      // JSON-typed script tag, but this option is safe from namespacing and\n      // injection issues, and doesn't require parsing\n      '<script>' +\n        'var MyApp = require(\"./myApp.js\"), container = document.getElementById(\"content\"), ' +\n        'component = React.renderComponent(MyApp(' + safeStringify(props) + '), container); ' +\n        // Now that everything has loaded, we can enable the button\n        'component.setProps({disabled: false})' +\n      '</script>'\n    )\n\n  // This endpoint is hit when the browser is requesting bundle.js from the page above\n  } else if (req.url == '/bundle.js') {\n\n    res.setHeader('Content-Type', 'text/javascript')\n\n    // Here we invoke browserify to package up our component.\n    // DON'T do it on the fly like this in production - it's very costly -\n    // either compile the bundle ahead of time, or use some smarter middleware\n    // (eg browserify-middleware).\n    // We also use literalify to transform our `require` statements for React\n    // so that it uses the global variable (from the CDN JS file) instead of\n    // bundling it up with everything else\n    browserify()\n      .transform(literalify.configure({react: 'window.React'}))\n      .require('./myApp.js')\n      .bundle()\n      .pipe(res)\n\n  // Return 404 for all other requests\n  } else {\n    res.statusCode = 404\n    res.end()\n  }\n\n// The http server listens on port 3000\n}).listen(3000)\n\n\n// A utility function to safely escape JSON for embedding in a <script> tag\nfunction safeStringify(obj) {\n  return JSON.stringify(obj).replace(/<\\/script/g, '<\\\\/script').replace(/<!--/g, '<\\\\!--')\n}\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mhart/react-server-example/issues"
  },
  "homepage": "https://github.com/mhart/react-server-example",
  "_id": "react-server-example@0.1.0",
  "dist": {
    "shasum": "82b81249f53115e1fddd58a4e4679645262bae2b"
  },
  "_from": "react-server-example@",
  "_resolved": "https://registry.npmjs.org/react-server-example/-/react-server-example-0.1.0.tgz"
}
